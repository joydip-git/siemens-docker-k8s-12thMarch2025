---------------------
Create volumes
---------------------
docker volume create data

---------------------
Create Network
---------------------

docker network create goals-net

---------------------
Run MongoDB Container
---------------------

docker run --name mongoserver -e MONGO_INITDB_ROOT_USERNAME=joydip -e MONGO_INITDB_ROOT_PASSWORD=secret -v data:/data/db --rm -d --network goals-net mongo

or---

docker run --name mongoserver --env-file ./env/mongo.env -v data:/data/db --rm -d --network=goals-net mongo

---------------------
Build Node API Image
---------------------

docker build -t goals-node .

---------------------
Run Node API Container
---------------------

docker run --name goals-backend -e MONGODB_USERNAME=joydip -e MONGODB_PASSWORD=secret -e PORT=3001 -e MONGODB_DNS_NAME=mongoserver -v logs:/app/logs -v D:/training/siemens-docker-k8s-12thMarch2025/codes/day-2/compose-networking-volumes-app/backend:/app -v /app/node_modules --rm -d --network goals-net -p 3001:3001  goals-node

or

docker run --name goals-backend --env-file ./env/backend.env -e MONGODB_DNS_NAME=mongoserver -v logs:/app/logs -v D:/training/siemens-docker-k8s-12thMarch2025/codes/day-2/compose-networking-volumes-app/backend:/app -v /app/node_modules --rm -d --network goals-net -p 3001:3001  goals-node

---------------------
Build React SPA Image
---------------------

docker build -t goals-react .

---------------------
Run React SPA Container
---------------------

docker run --name goals-frontend \
  -v D:/my-applications/docker-apps/docker-compose-app/frontend/src:/app/src \
  --rm \
  -d \
  -p 3000:3000 \
  -it \
  goals-react

---------------------
Stop all Containers
---------------------

docker stop mongodb goals-backend goals-frontend

